version "4.5"

enum BlipType
{
	Blip_Hostile,
	Blip_StrongHostile,
	Blip_PowerfulHostile,
	Blip_Friendly,
	Blip_Player,
	Blip_Health,
	Blip_ArmorPickup,
	Blip_ArmorBonus,
	Blip_Weapon,
	Blip_Ammo,
	Blip_Powerup,
	Blip_Countable,
	Blip_FragShard
}

enum RMode
{
	Mode_Disabled,
	Mode_Full,
	Mode_Movement,
	Mode_Local
}

class RadarBlip
{
	double PlayerAngle;
	vector3 PlayerPos;
	vector3 TargetPos;
	BlipType Type;
}

class ZRadarMainHandler : EventHandler
{
	// ----------------------------------------------------------
	// CORE
	// ----------------------------------------------------------

	private transient CVar DefaultRadarMode;
	private transient CVar SelectionMode;

	private transient CVar DrawOverHud;
	private transient CVar OffsetX;
	private transient CVar OffsetY;
	private transient CVar Scale;
	private transient CVar Opacity;
	private transient CVar RadarColor;
	private transient CVar RangeUnits;
	private transient CVar RangeDivisions;

	private transient CVar ScanDistance;
	private transient CVar AngleLimit;
	private transient CVar RefreshRate;

	private transient CVar ValidActors;

	private transient CVar RefreshSoundContact;
	private transient CVar RefreshSoundClear;
	private transient CVar RefreshSoundVolume;

	private transient CVar BatteryEnabled;
	private transient CVar BatteryDrainTime;
	private transient CVar BatteryRechargeTime;

	private transient Array<RadarBlip> RadarBlips;
	private int RadarMode[MAXPLAYERS]; // [Ace] This should have been called RadarState.
	private int BatteryPower[MAXPLAYERS];
	private int AccumulatedDrain[MAXPLAYERS];

	private transient int ArrayRefreshTics;

	static void DestroyMainHandler()
	{
		let Handler = EventHandler.Find("ZRadarMainHandler");
		if (Handler)
		{
			Handler.Destroy();
		}
	}

	override void OnRegister()
	{
		DefaultRadarMode = CVar.GetCVar('zradar_defmode', players[consoleplayer]);
		SelectionMode = CVar.GetCVar('zradar_selectionmode', players[consoleplayer]);

		DrawOverHud = CVar.GetCVar('zradar_drawoverhud', players[consoleplayer]);
		OffsetX = CVar.GetCVar('zradar_offset_x', players[consoleplayer]);
		OffsetY = CVar.GetCVar('zradar_offset_y', players[consoleplayer]);
		Scale = CVar.GetCVar('zradar_scale', players[consoleplayer]);
		Opacity = CVar.GetCVar('zradar_opacity', players[consoleplayer]);
		RadarColor = CVar.GetCVar('zradar_color', players[consoleplayer]);
		RangeUnits = CVar.GetCVar('zradar_rangeunits', players[consoleplayer]);
		RangeDivisions = CVar.GetCVar('zradar_rangedivisions', players[consoleplayer]);

		ScanDistance = CVar.GetCVar('zradar_distance');
		AngleLimit = CVar.GetCVar('zradar_anglelimit');
		RefreshRate = CVar.GetCVar('zradar_refreshrate');

		ValidActors = CVar.GetCVar('zradar_validactors');

		RefreshSoundContact = CVar.GetCVar('zradar_refreshsound_contact', players[consoleplayer]);
		RefreshSoundClear = CVar.GetCVar('zradar_refreshsound_clear', players[consoleplayer]);
		RefreshSoundVolume = CVar.GetCVar('zradar_refreshsoundvolume', players[consoleplayer]);
		
		BatteryEnabled = CVar.GetCVar('zradar_battery_enable');
		BatteryDrainTime = CVar.GetCVar('zradar_battery_draintime');
		BatteryRechargeTime = CVar.GetCVar('zradar_battery_rechargetime');
	}

	override void WorldLoaded(WorldEvent e)
	{
		BatteryPower[consoleplayer] = 100;
		SetRadarMode(consoleplayer, DefaultRadarMode.GetInt(), true);
	}

	override void WorldTick()
	{
		if (GameState != GS_LEVEL) return;

		int DrainTime = int(35 * 60 * BatteryDrainTime.GetFloat() * GetDrainMult(RadarMode[consoleplayer]));
		int RechargeTime = int(35 * 60 * BatteryRechargeTime.GetFloat());
		int refRate = RefreshRate.GetInt();
		let plr = players[consoleplayer].mo;

		if (!plr)
		{
			return;
		}

		if (!CheckRadarCondition(plr))
		{
			SetRadarMode(consoleplayer, Mode_Disabled);
			return;
		}

		// [Ace] Battery stuff.
		if (BatteryEnabled.GetBool())
		{
			// [Ace] Draining.
			if (RadarMode[consoleplayer] > Mode_Disabled)
			{
				BatteryPower[consoleplayer] = int((1.0 - AccumulatedDrain[consoleplayer]++ / double(DrainTime)) * 100);

				if (BatteryPower[consoleplayer] <= 0)
				{
					SetRadarMode(consoleplayer, Mode_Disabled);
				}
			}

			// [Ace] Recharging.
			else if (RadarMode[consoleplayer] == Mode_Disabled && BatteryPower[consoleplayer] < 100)
			{
				BatteryPower[consoleplayer] = int((1.0 - AccumulatedDrain[consoleplayer]-- / double(RechargeTime)) * 100);

				if (plr && BatteryPower[consoleplayer] == 100)
				{
					plr.A_Print("\c[Cyan]Scanner fully charged!\c-", 2);
					plr.A_StartSound("Radar/GenAlert", 7, CHANF_UI | CHANF_LOCAL | CHANF_OVERLAP);
				}
			}
		}

		// [Ace] This is where enemies are updated.
		if (RadarMode[consoleplayer] > Mode_Disabled && ArrayRefreshTics++ >= refRate)
		{
			RadarBlips.Clear();

			int angleLimit = AngleLimit.GetInt();
			int scanDist = ScanDistance.Getint();
			BlockThingsIterator it = BlockThingsIterator.Create(plr, scanDist);
			while (it.Next())
			{
				BlipType type = ClassifyActor(it.thing);
				if (type == -1 || it.thing == players[consoleplayer].mo || it.thing.Health <= 0 || players[consoleplayer].mo.Distance2D(it.thing) - it.thing.Radius + it.thing.vel.length() > scanDist)
				{
					continue;
				}

				double angle = Actor.AbsAngle(plr.AngleTo(it.thing), plr.Angle);
				bool isWithinScanAngle = Angle <= max(45, angleLimit) / 2;

				// [Ace] I'm not too sure what e.Thing.target is for anymore. I know the master is checked for compatibility with Hideous Destructor's DERPs and HERPs.
				// I think target is so that it shows up if it's an enemy that's acquired a player?
				if (isWithinScanAngle && (type == Blip_Player || type == Blip_FragShard || RadarMode[consoleplayer] == Mode_Full || RadarMode[consoleplayer] == Mode_Movement && (it.thing.vel.length() > 0 || it.thing.target || it.thing.master is "PlayerPawn") || (RadarMode[consoleplayer] == Mode_Local && players[consoleplayer].mo.CheckSight(it.thing))))
				{
					let Blip = new("RadarBlip");
					Blip.type = type;
					Blip.TargetPos = it.thing.pos;
					Blip.PlayerPos = players[consoleplayer].mo.pos;
					Blip.PlayerAngle = players[consoleplayer].mo.Angle;
					RadarBlips.Push(Blip);
				}
			}

			int RefSoundContact = RefreshSoundContact.GetInt();
			int RefSoundClear = RefreshSoundClear.GetInt();
			if (plr && refRate >= 15 && RefSoundContact > 0) // [Ace] The > 15 check is so it doesn't screw up your hearing if you set it to something ridiculously low.
			{
				string snd = GetHostileBlipCount() > 0 ? "Radar/RefreshSound/Contact"..RefSoundContact : "Radar/RefreshSound/Clear"..RefSoundClear;
				plr.A_StartSound(snd, 7, CHANF_UI | CHANF_LOCAL | CHANF_OVERLAP, RefreshSoundVolume.GetFloat());
			}

			ArrayRefreshTics = 0;
		}
	}

	override void NetworkProcess(ConsoleEvent e)
	{
		if (e.Name ~== "ChangeRadarMode")
		{
			// [Ace] Force radar refresh when you switch modes.
			ArrayRefreshTics = RefreshRate.GetInt();
			int SelMode = SelectionMode.GetInt();
			
			// [Ace] Cycle modes.
			if (SelMode == -1)
			{
				SetRadarMode(e.Player, (RadarMode[e.Player] + 1) % 4);
			}

			// [Ace] Or toggle between disabled and the selected mode.
			else
			{
				SetRadarMode(e.Player, RadarMode[e.Player] == SelMode ? 0 : SelMode);
			}
		}
	}

	private void SetRadarMode(int plrIndex, int mode, bool silent = false)
	{
		let plr = players[plrIndex].mo;
		if (!plr || RadarMode[plrIndex] == Mode_Disabled && mode > Mode_Disabled && !CheckRadarCondition(plr) || RadarMode[plrIndex] == mode)
		{
			return;
		}

		RadarMode[plrIndex] = mode;

		if (!silent)
		{
			string Message = "";
			switch (mode)
			{
				case Mode_Disabled: Message = "\c[Orange]Scanner Deactivated\c-"; break;
				case Mode_Full: Message = "\c[Green]Full Scanner Activated\c-"; break;
				case Mode_Movement: Message = "\c[Yellow]Movement Scanner Activated\c-"; break;
				case Mode_Local: Message = "\c[Red]Local Scanner Activated\c-"; break;	
			}

			plr.A_Print(Message, 1);
			plr.A_StartSound("Radar/GenAlert", 7, CHANF_UI | CHANF_LOCAL | CHANF_OVERLAP);
		}
	}

	// ----------------------------------------------------------
	// UI
	// ----------------------------------------------------------

	const FontName = "ZRDRFONT";

	private transient ui HUDFont mMainFont;

	override void RenderUnderlay(RenderEvent e)
	{
		if (!DrawOverHud.GetBool())
		{
			DrawRadar();
		}
	}

	override void RenderOverlay(RenderEvent e)
	{
		if (DrawOverHud.GetBool())
		{
			DrawRadar();
		}
	}

	private ui void DrawRadar()
	{
		if (GameState != GS_LEVEL || AutomapActive) return;
		
		mMainFont = HUDFont.Create(FontName);

		int OriginalWidth = StatusBar.HorizontalResolution;
		int OriginalHeight = StatusBar.VerticalResolution;

		double radarScale = Scale.GetFloat();
		int refRate = RefreshRate.GetInt();

		if (RadarMode[consoleplayer] > Mode_Disabled)
		{
			StatusBar.BeginHUD(1.0, true);
			StatusBar.SetSize(StatusBar.RelTop, int(640 / radarScale), int(480 / radarScale));

			// --------------- SHARED ---------------

			double alpha = GetAlpha();
			int scanDist = ScanDistance.GetInt();

			// --------------- CIRCLE ---------------

			int radCol = RadarColor.GetInt();
			vector2 radarPos = (OffsetX.GetInt(), OffsetY.GetInt());
			int drawFlags = GetAlignmentFlags(radarPos);
			drawFlags |= StatusBar.DI_ITEM_CENTER;

			// [Ace] Main.
			StatusBar.DrawImage("R"..radCol.."MAIN", radarPos, drawFlags, alpha);

			// [Ace] Scan circle.
			if (refRate > 1)
			{
				vector2 scanScale = (1.0, 1.0);
				scanScale *= ArrayRefreshTics / double(refRate);
				StatusBar.DrawImage("R"..radCol.."SCAN", radarPos, drawFlags, alpha, scale: scanScale);
			}

			// [Ace] Range circles.
			int units = RangeUnits.GetInt();
			if (units > 0)
			{
				int rangeCol = 0;
				switch (radCol)
				{
					case 0: rangeCol = Font.CR_LIGHTBLUE; break;
					case 1: rangeCol = Font.CR_GREEN; break;
				}

				int divisions = RangeDivisions.GetInt();
				for (int i = 1; i <= divisions; ++i)
				{
					string str = "";
					switch (units)
					{
						case 1: str = StatusBar.FormatNumber(int(scanDist / double(divisions) * i), 1, 4); break;
						case 2: str = StatusBar.FormatNumber(int(scanDist / double(divisions) / 37.0 * i), 1, 3).."m"; break;
					}

					// [Ace] Circle.
					StatusBar.DrawImage("R"..radCol.."RANGE", radarPos, drawFlags, alpha * 0.60, scale: (1.0, 1.0) * (i / double(divisions)));

					// [Ace] Number.
					StatusBar.DrawString(mMainFont, str, (radarPos.x - 1, radarPos.y + 2 - 60 / divisions * i), drawFlags | BaseStatusBar.DI_TEXT_ALIGN_CENTER, rangeCol, alpha * 0.60);
				}
			}

			// --------------- CROSS ---------------

			int CrossColor = 0;
			switch (RadarMode[consoleplayer])
			{
				case Mode_Local: CrossColor = Font.CR_RED; break;
				case Mode_Movement: CrossColor = Font.CR_YELLOW; break;
				case Mode_Full: CrossColor = Font.CR_GREEN; break;
			}
			StatusBar.DrawString(mMainFont, "+", (radarPos.x - 4, radarPos.y - 4), drawFlags, CrossColor, alpha);

			// --------------- BLIPS N STUFF ---------------

			alpha *= refRate > 1 ? 1.0 - ArrayRefreshTics / double(refRate) : 1.0;
			double scale = 17 * (scanDist / 1000.0);
			for (int i = 0; i < RadarBlips.Size(); ++i)
			{
				DrawBlip(StatusBar, RadarBlips[i], radarPos, drawFlags, scale, alpha);
			}

			// --------------- PRETEND WE WERE NEVER HERE ---------------

			StatusBar.BeginHUD(1.0, false);
			StatusBar.SetSize(StatusBar.RelTop, OriginalWidth, OriginalHeight);
		}
	}

	private ui void DrawBlip(BaseStatusBar sbar, RadarBlip blip, vector2 drawPos, int flags, double scale, double alpha)
	{
		if (!blip)
		{
			return;
		}

		vector3 dif = (blip.PlayerPos.x - Blip.TargetPos.x, blip.PlayerPos.y - blip.TargetPos.y, blip.TargetPos.z - Blip.PlayerPos.z);

		// [Ace] This part of the code (the one with the maths) is the only one that doesn't directly belong to me. I don't know what the variables are supposed to mean because they use ye olde Ken Silverman naming conventions
		// and make fuck all sense to everyone else but the author. Name your damn variables properly! Anyway, I think the 'd' stands for "draw".
		double dx = dif.x * cos(-Blip.PlayerAngle) - dif.y * sin(-Blip.PlayerAngle);
		double dy = dif.x * sin(-Blip.PlayerAngle) + dif.y * cos(-Blip.PlayerAngle);
		dx /= scale; dx += drawPos.y;
		dy /= scale; dy += drawPos.x;

		string blipImage = "";
		vector2 drawBox = (5, 5);
		switch (blip.Type)
		{
			case Blip_Hostile:
				blipImage = dif.z <= -60 ? "REDBELOW" : (dif.z >= 60 ? "REDABOVE" : "REDDOT"); break;

			case Blip_StrongHostile:
				blipImage = dif.z <= -60 ? "ORNBELOW" : (dif.z >= 60 ? "ORNABOVE" : "ORNDOT"); break;

			case Blip_PowerfulHostile:
				blipImage = dif.z <= -60 ? "GLDBELOW" : (dif.z >= 60 ? "GLDABOVE" : "GLDDOT"); break;

			case Blip_Friendly:
				blipImage = dif.z <= -60 ? "CYNBELOW" : (dif.z >= 60 ? "CYNABOVE" : "CYNDOT"); break;

			case Blip_Player:
				blipImage = dif.z <= -60 ? "GRNBELOW" : (dif.z >= 60 ? "GRNABOVE" : "GRNDOT"); break;

			case Blip_Health:
				blipImage = "REDCROSS"; drawBox = (4, 4); break;

			case Blip_ArmorPickup:
				blipImage = "BLUSQARE"; drawBox = (3, 3); break;

			case Blip_ArmorBonus:
				blipImage = "GRNSQARE"; drawBox = (3, 3); break;

			case Blip_Weapon:
				blipImage = "GLDSTAR"; break;

			case Blip_Ammo:
				blipImage = "TANSQARE"; drawBox = (3, 3); break;

			case Blip_Powerup:
				blipImage = "PNKSTAR"; break;

			case Blip_Countable:
				blipImage = "GLDSQARE"; drawBox = (3, 3); break;

			case Blip_FragShard:
				blipImage = "GRNSTAR"; break;
		}
		
		StatusBar.DrawImage(BlipImage, (dy, dx), flags, alpha, drawBox);
	}

	// ----------------------------------------------------------
	// INFORMATION
	// ----------------------------------------------------------

	protected virtual ui double GetAlpha()
	{
		double Alpha = Opacity.GetFloat();
		if (BatteryEnabled.GetBool())
		{
			double Mult = BatteryPower[consoleplayer] / 100.0;
			Alpha *= max(0.35, Mult);
		}
		return Alpha;
	}
	protected virtual clearscope bool CheckRadarCondition(PlayerPawn plr) { return true; }

	clearscope int GetRadarMode()
	{
		return RadarMode[consoleplayer];
	}

	double GetDrainMult(RMode mode) const
	{
		switch (mode)
		{
			case Mode_Local: return 2.0;
			case Mode_Movement: return 1.5;
			case Mode_Full: return 1.0;
		}

		return 1.0;
	}

	clearscope BlipType ClassifyActor(Actor a)
	{
		// [Ace] Too lazy to enum this.
		int valid = ValidActors.GetInt();

		if (valid & 512 && a.GetClassName() == 'BFGNecroShard')
		{
			return Blip_FragShard;
		}
		if (valid & 1 && a.bISMONSTER)
		{
			if (a.bFRIENDLY)
			{
				return Blip_Friendly;
			}
			else
			{
				int SpawnHealth = a.GetSpawnHealth();
				if (SpawnHealth < 400)
				{
					return Blip_Hostile;
				}
				else if (SpawnHealth < 1000)
				{
					return Blip_StrongHostile;
				}
				else
				{
					return Blip_PowerfulHostile;
				}
			}
		}
		if (valid & 2 && a is "PlayerPawn")
		{
			return Blip_Player;
		}
		if (valid & 4 && a is 'Health')
		{
			return Blip_Health;
		}
		if (valid & 8 && a is 'BasicArmorPickup')
		{
			return Blip_ArmorPickup;
		}
		if (valid & 16 && a is 'BasicArmorBonus')
		{
			return Blip_ArmorBonus;
		}
		if (valid & 32 && a is 'Weapon')
		{
			return Blip_Weapon;
		}
		if (valid & 64)
		{
			/// [Ace] When it comes to HD, only display HDMagAmmo items. This is because loose ammo counts as Ammo which will absolutely DESTROY performance.
			Name hdmagstr = 'HDMagAmmo';
			class<Actor> hdmagcls = hdmagstr;
			if (hdmagcls && a is hdmagcls || !hdmagcls && a is 'Ammo')
			{
				return Blip_Ammo;
			}
		}
		if (valid & 128 && a is 'PowerupGiver')
		{
			return Blip_Powerup;
		}
		if (valid & 256 && a.bCOUNTITEM && !(a is 'BasicArmorBonus') && !(a is 'PowerupGiver'))
		{
			return Blip_Countable;
		}
		
		return -1;
	}

	private clearscope int GetHostileBlipCount()
	{
		int HostileBlips = 0;

		for (int i = 0; i < RadarBlips.Size(); ++i)
		{
			if (RadarBlips[i].Type == Blip_Hostile || RadarBlips[i].Type == Blip_StrongHostile || RadarBlips[i].Type == Blip_PowerfulHostile)
			{
				HostileBlips++;
			}
		}

		return HostileBlips;
	}

	private ui int GetAlignmentFlags(vector2 offsets) const
	{
		int AlignFlags = 0;
		if (offsets.x > 0)
		{
			AlignFlags |= StatusBar.DI_SCREEN_LEFT;
		}
		else if (offsets.x < 0)
		{
			AlignFlags |= StatusBar.DI_SCREEN_RIGHT;
		}
		else
		{
			AlignFlags |= StatusBar.DI_SCREEN_HCENTER;
		}

		if (offsets.y > 0)
		{
			AlignFlags |= StatusBar.DI_SCREEN_TOP;
		}
		else if (offsets.y < 0)
		{
			AlignFlags |= StatusBar.DI_SCREEN_BOTTOM;
		}
		else
		{
			AlignFlags |= StatusBar.DI_SCREEN_VCENTER;
		}
		
		return AlignFlags;
	}
}
