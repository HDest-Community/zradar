version "4.6"

enum RMode
{
	Mode_Disabled,
	Mode_Full,
	Mode_Movement,
	Mode_Local
}

class RadarBlip
{
	enum BlipColors
	{
		Col_Red = 0xFFFF2222,
		Col_Orange = 0xFFFF7711,
		Col_Gold = 0xFFFFDD00,
		Col_Green = 0xFF11FF11,
		Col_BlueGreen = 0xFF55FF77,
		Col_Cyan = 0xFF11FFFF,
		Col_Blue = 0xFF3366FF,
		Col_Purple = 0xFF7755FF,
		Col_Pink = 0xFFFF55FF,
		Col_Tan = 0XFFDBC9A4
	}

	vector2 DrawPos;
	string Icon;
	Color DrawCol;
	vector2 DrawBox;
	bool IsHostile;

	static RadarBlip Create(PlayerPawn plr, Actor other, string iconNormal, Color drawCol, string iconBelow = "", string iconAbove = "", vector2 drawBox = (5, 5))
	{
		let blip = new('RadarBlip');

		// [Ace] This is not level.Vec3Diff because then I'd have to flip the Z axis and screw that.
		vector3 diff = (plr.pos.x - other.pos.x, plr.pos.y - other.pos.y, other.pos.z - plr.pos.z);

		blip.DrawPos =
		(
			diff.x * cos(-plr.angle) - diff.y * sin(-plr.angle),
			diff.x * sin(-plr.angle) + diff.y * cos(-plr.angle)
		);

		blip.DrawCol = drawCol;
		blip.DrawBox = drawBox;
		blip.IsHostile = other.bISMONSTER && !other.bFRIENDLY;

		// [Ace] Use the correct icon.
		blip.Icon = diff.z <= -60 && iconBelow != "" ? iconBelow : (diff.z >= 60 && iconAbove != "" ? iconAbove : iconNormal);

		return blip;
	}
}

class ZRadarMainHandler : EventHandler
{
	// ----------------------------------------------------------
	// CORE
	// ----------------------------------------------------------

	private transient CVar DefaultRadarMode;
	private transient CVar SelectionMode;

	private transient CVar DrawOverHud;
	private transient CVar OffsetX;
	private transient CVar OffsetY;
	private transient CVar VisibilityFlags;
	private transient CVar Scale;
	private transient CVar Opacity;
	private transient CVar RadarColor;
	private transient CVar RangeUnits;
	private transient CVar RangeDivisions;

	private transient CVar ScanDistance;
	private transient CVar OverscanDistance;
	private transient CVar AngleLimit;
	private transient CVar RefreshRate;

	private transient CVar ValidActors;

	private transient CVar RefreshSoundContact;
	private transient CVar RefreshSoundClear;
	private transient CVar RefreshSoundVolume;

	private transient CVar BatteryEnabled;
	private transient CVar BatteryDrainTime;
	private transient CVar BatteryRechargeTime;

	private transient Array<RadarBlip> RadarBlips;
	private int RadarMode[MAXPLAYERS]; // [Ace] This should have been called RadarState.
	private int BatteryPower[MAXPLAYERS];
	private int AccumulatedDrain[MAXPLAYERS];

	private transient int ArrayRefreshTics;

	static void DestroyMainHandler()
	{
		let Handler = EventHandler.Find("ZRadarMainHandler");
		if (Handler)
		{
			Handler.Destroy();
		}
	}

	override void OnRegister()
	{
		DefaultRadarMode = CVar.GetCVar('zradar_defmode', players[consoleplayer]);
		SelectionMode = CVar.GetCVar('zradar_selectionmode', players[consoleplayer]);

		DrawOverHud = CVar.GetCVar('zradar_drawoverhud', players[consoleplayer]);
		OffsetX = CVar.GetCVar('zradar_offset_x', players[consoleplayer]);
		OffsetY = CVar.GetCVar('zradar_offset_y', players[consoleplayer]);
		Scale = CVar.GetCVar('zradar_scale', players[consoleplayer]);
		Opacity = CVar.GetCVar('zradar_opacity', players[consoleplayer]);
		RadarColor = CVar.GetCVar('zradar_color', players[consoleplayer]);
		RangeUnits = CVar.GetCVar('zradar_rangeunits', players[consoleplayer]);
		RangeDivisions = CVar.GetCVar('zradar_rangedivisions', players[consoleplayer]);
		VisibilityFlags = CVar.GetCVar('zradar_visibility', players[consoleplayer]);

		ScanDistance = CVar.GetCVar('zradar_distance');
		OverscanDistance = CVar.GetCVar('zradar_overdistance');
		AngleLimit = CVar.GetCVar('zradar_anglelimit');
		RefreshRate = CVar.GetCVar('zradar_refreshrate');

		ValidActors = CVar.GetCVar('zradar_validactors');

		RefreshSoundContact = CVar.GetCVar('zradar_refreshsound_contact', players[consoleplayer]);
		RefreshSoundClear = CVar.GetCVar('zradar_refreshsound_clear', players[consoleplayer]);
		RefreshSoundVolume = CVar.GetCVar('zradar_refreshsoundvolume', players[consoleplayer]);
		
		BatteryEnabled = CVar.GetCVar('zradar_battery_enable');
		BatteryDrainTime = CVar.GetCVar('zradar_battery_draintime');
		BatteryRechargeTime = CVar.GetCVar('zradar_battery_rechargetime');
	}

	override void WorldLoaded(WorldEvent e)
	{
		BatteryPower[consoleplayer] = 100;
		SetRadarMode(consoleplayer, DefaultRadarMode.GetInt(), true);
	}

	override void WorldTick()
	{
		if (GameState != GS_LEVEL) return;

		int DrainTime = int(35 * 60 * BatteryDrainTime.GetFloat() * GetDrainMult(RadarMode[consoleplayer]));
		int RechargeTime = int(35 * 60 * BatteryRechargeTime.GetFloat());
		int refRate = RefreshRate.GetInt();
		let plr = players[consoleplayer].mo;

		if (!plr)
		{
			return;
		}

		if (!CheckRadarCondition(plr))
		{
			SetRadarMode(consoleplayer, Mode_Disabled);
			return;
		}

		// [Ace] Battery stuff.
		if (BatteryEnabled.GetBool())
		{
			// [Ace] Draining.
			if (RadarMode[consoleplayer] > Mode_Disabled)
			{
				BatteryPower[consoleplayer] = int((1.0 - AccumulatedDrain[consoleplayer]++ / double(DrainTime)) * 100);

				if (BatteryPower[consoleplayer] <= 0)
				{
					SetRadarMode(consoleplayer, Mode_Disabled);
				}
			}

			// [Ace] Recharging.
			else if (RadarMode[consoleplayer] == Mode_Disabled && BatteryPower[consoleplayer] < 100)
			{
				BatteryPower[consoleplayer] = int((1.0 - AccumulatedDrain[consoleplayer]-- / double(RechargeTime)) * 100);

				if (plr && BatteryPower[consoleplayer] == 100)
				{
					plr.A_Print("\c[Cyan]Scanner fully charged!\c-", 2);
					plr.A_StartSound("Radar/GenAlert", 7, CHANF_UI | CHANF_LOCAL | CHANF_OVERLAP);
				}
			}
		}

		// [Ace] This is where enemies are updated.
		if (RadarMode[consoleplayer] > Mode_Disabled && ArrayRefreshTics++ >= refRate)
		{
			RadarBlips.Clear();

			int angleLimit = AngleLimit.GetInt();
			int scanDist = max(ScanDistance.Getint(), OverscanDistance.GetInt());
			BlockThingsIterator it = BlockThingsIterator.Create(plr, scanDist);
			while (it.Next())
			{
				if (it.thing == players[consoleplayer].mo || it.thing.Health <= 0 || players[consoleplayer].mo.Distance2D(it.thing) - it.thing.Radius + it.thing.vel.length() > scanDist)
				{
					continue;
				}

				double angle = Actor.AbsAngle(plr.AngleTo(it.thing), plr.Angle);
				bool isWithinScanAngle = angle <= max(45, angleLimit) / 2;

				if (isWithinScanAngle)
				{
					RadarBlip blip = TryMakeBlip(RadarMode[consoleplayer], ValidActors.GetInt(), players[consoleplayer].mo, it.thing);
					if (blip)
					{
						RadarBlips.Push(blip);
					}
				}
			}

			int refSoundContact = RefreshSoundContact.GetInt();
			int refSoundClear = RefreshSoundClear.GetInt();
			if (plr && refRate >= 15 && RefSoundContact > 0) // [Ace] The >= 15 check is so it doesn't screw up your hearing if you set it to something ridiculously low.
			{
				string snd = GetHostileBlipCount() > 0 ? "Radar/RefreshSound/Contact"..refSoundContact : "Radar/RefreshSound/Clear"..refSoundClear;
				plr.A_StartSound(snd, 7, CHANF_UI | CHANF_LOCAL | CHANF_OVERLAP, RefreshSoundVolume.GetFloat());
			}

			ArrayRefreshTics = 0;
		}
	}

	override void NetworkProcess(ConsoleEvent e)
	{
		if (e.Name ~== "ChangeRadarMode")
		{
			// [Ace] Force radar refresh when you switch modes.
			ArrayRefreshTics = RefreshRate.GetInt();
			int SelMode = SelectionMode.GetInt();
			
			// [Ace] Cycle modes.
			if (SelMode == -1)
			{
				SetRadarMode(e.Player, (RadarMode[e.Player] + 1) % 4);
			}

			// [Ace] Or toggle between disabled and the selected mode.
			else
			{
				SetRadarMode(e.Player, RadarMode[e.Player] == SelMode ? 0 : SelMode);
			}
		}
	}

	private void SetRadarMode(int plrIndex, int mode, bool silent = false)
	{
		let plr = players[plrIndex].mo;
		if (!plr || RadarMode[plrIndex] == Mode_Disabled && mode > Mode_Disabled && !CheckRadarCondition(plr) || RadarMode[plrIndex] == mode)
		{
			return;
		}

		RadarMode[plrIndex] = mode;

		if (!silent)
		{
			string Message = "";
			switch (mode)
			{
				case Mode_Disabled: Message = "\c[Orange]Scanner Deactivated\c-"; break;
				case Mode_Full: Message = "\c[Green]Full Scanner Activated\c-"; break;
				case Mode_Movement: Message = "\c[Yellow]Movement Scanner Activated\c-"; break;
				case Mode_Local: Message = "\c[Red]Local Scanner Activated\c-"; break;	
			}

			plr.A_Print(Message, 1);
			plr.A_StartSound("Radar/GenAlert", 7, CHANF_UI | CHANF_LOCAL | CHANF_OVERLAP);
		}
	}

	protected virtual RadarBlip TryMakeBlip(int mode, int toggles, PlayerPawn plr, Actor other)
	{
		if (!plr || !other)
		{
			return null;
		}

		// [Ace] Pick the ones you want to check in each condition below.
		bool full = mode == Mode_Full;
		bool movement = mode == Mode_Movement && (other.vel.length() > 0 || other.target || other.master is 'PlayerPawn');
		bool local = mode == Mode_Local && plr.CheckSight(other);

		if (full || movement || local)
		{
			if (other.bISMONSTER)
			{
				if (toggles & 1 && !other.bFRIENDLY)
				{
					int SpawnHealth = other.GetSpawnHealth();
					if (SpawnHealth < 400)
					{
						return RadarBlip.Create(plr, other, "BLPDOT", RadarBlip.Col_Red, "BLPBELOW", "BLPABOVE");
					}
					else if (SpawnHealth < 1000)
					{
						return RadarBlip.Create(plr, other, "BLPDOT", RadarBlip.Col_Orange, "BLPBELOW", "BLPABOVE");
					}
					else
					{
						return RadarBlip.Create(plr, other, "BLPDOT", RadarBlip.Col_Gold, "BLPBELOW", "BLPABOVE");
					}
				}
				if (toggles & 1 << 1 && other.bFRIENDLY)
				{
					return RadarBlip.Create(plr, other, "BLPDOT", RadarBlip.Col_Cyan, "BLPBELOW", "BLPABOVE");
				}
			}
			if (toggles & 1 << 2 && other is "PlayerPawn")
			{
				return RadarBlip.Create(plr, other, "BLPDOT", RadarBlip.Col_Green, "BLPBELOW", "BLPABOVE");
			}
		}
		if (full || mode == Mode_Movement || local)
		{
			if (toggles & 1 << 3 && other is 'Health')
			{
				return RadarBlip.Create(plr, other, "BLPCROSS", RadarBlip.Col_Red, drawBox: (4, 4));
			}
			if (toggles & 1 << 4 && other is 'BasicArmorPickup')
			{
				return RadarBlip.Create(plr, other, "BLPCROSS", RadarBlip.Col_Blue, drawBox: (4, 4));
			}
			if (toggles & 1 << 5 && other is 'BasicArmorBonus')
			{
				return RadarBlip.Create(plr, other, "BLPCROSS", RadarBlip.Col_Green, drawBox: (3, 3));
			}
			if (toggles & 1 << 6 && other is 'Weapon')
			{
				return RadarBlip.Create(plr, other, "BLPSTAR", RadarBlip.Col_Gold);
			}
			if (toggles & 1 << 7 && other is 'Ammo')
			{
				return RadarBlip.Create(plr, other, "BLPSQARE", RadarBlip.Col_Tan, drawBox: (3, 3));
			}
			if (toggles & 1 << 8 && other is 'PowerupGiver')
			{
				return RadarBlip.Create(plr, other, "BLPSTAR", RadarBlip.Col_Pink);
			}
			if (toggles & 1 << 9 && other.bCOUNTITEM && !(other is 'BasicArmorBonus') && !(other is 'PowerupGiver'))
			{
				return RadarBlip.Create(plr, other, "BLPSQARE", RadarBlip.Col_Gold, drawBox: (3, 3));
			}
		}
		
		return null;
	}

	// ----------------------------------------------------------
	// UI
	// ----------------------------------------------------------

	const FontName = "ZRDRFONT";

	private transient ui HUDFont mMainFont;

	override void RenderUnderlay(RenderEvent e)
	{
		if (!DrawOverHud.GetBool())
		{
			DrawRadar();
		}
	}

	override void RenderOverlay(RenderEvent e)
	{
		if (DrawOverHud.GetBool())
		{
			DrawRadar();
		}
	}

	private ui void DrawRadar()
	{
		if (GameState != GS_LEVEL || AutomapActive) return;
		
		mMainFont = HUDFont.Create(FontName);

		int OriginalWidth = StatusBar.HorizontalResolution;
		int OriginalHeight = StatusBar.VerticalResolution;

		double radarScale = Scale.GetFloat();
		int refRate = RefreshRate.GetInt();

		int visFlags = VisibilityFlags.GetInt();

		if (RadarMode[consoleplayer] > Mode_Disabled)
		{
			StatusBar.BeginHUD(1.0, true);
			StatusBar.SetSize(StatusBar.RelTop, int(640 / radarScale), int(480 / radarScale));

			// --------------- SHARED ---------------

			double alpha = GetAlpha();
			int scanDist = min(ScanDistance.GetInt(), OverscanDistance.GetInt());

			// --------------- CIRCLE ---------------

			Color radCol = 0xFF000000 | RadarColor.GetInt();

			vector2 radarPos = (OffsetX.GetInt(), OffsetY.GetInt());
			int drawFlags = GetAlignmentFlags(radarPos);
			drawFlags |= StatusBar.DI_ITEM_CENTER;

			// [Ace] Main.
			if (visFlags & 1)
			{
				StatusBar.DrawImage("ZRMAIN", radarPos, drawFlags, alpha, col: radCol);
			}

			// [Ace] Scan circle.
			if (refRate > 1 && visFlags & 2)
			{
				vector2 scanScale = (1.0, 1.0);
				scanScale *= ArrayRefreshTics / double(refRate);
				StatusBar.DrawImage("ZRSCAN", radarPos, drawFlags, alpha, scale: scanScale, col: radCol);
			}

			// [Ace] Range circles.
			int units = RangeUnits.GetInt();
			if (units > 0)
			{
				int divisions = RangeDivisions.GetInt();
				for (int i = 1; i <= divisions; ++i)
				{
					string str = "";
					switch (units)
					{
						case 1: str = StatusBar.FormatNumber(int(scanDist / double(divisions) * i), 1, 4); break;
						case 2: str = StatusBar.FormatNumber(int(scanDist / double(divisions) / 37.0 * i), 1, 3).."m"; break;
					}

					// [Ace] Circle.
					StatusBar.DrawImage("ZRRANGE", radarPos, drawFlags, alpha * 0.60, scale: (1.0, 1.0) * (i / double(divisions)), col: radCol);

					// [Ace] Number.
					StatusBar.DrawString(mMainFont, str, (radarPos.x - 1, radarPos.y + 2 - 60 / divisions * i), drawFlags | BaseStatusBar.DI_TEXT_ALIGN_CENTER, Font.CR_WHITE, alpha * 0.60);
				}
			}

			// --------------- CROSS ---------------

			int CrossColor = 0;
			switch (RadarMode[consoleplayer])
			{
				case Mode_Local: CrossColor = Font.CR_RED; break;
				case Mode_Movement: CrossColor = Font.CR_YELLOW; break;
				case Mode_Full: CrossColor = Font.CR_GREEN; break;
			}
			StatusBar.DrawString(mMainFont, "+", (radarPos.x - 4, radarPos.y - 4), drawFlags, CrossColor, alpha);

			// --------------- BLIPS N STUFF ---------------

			alpha *= refRate > 1 ? 1.0 - ArrayRefreshTics / double(refRate) : 1.0;

			// [Ace] This magic number ensures the blips scale correctly with distance.
			// I think the number is supposed to be the radar's radius minus the blip's radius.
			double scale = scanDist / 58.60;
			for (int i = 0; i < RadarBlips.Size(); ++i)
			{
				RadarBlip blip = RadarBlips[i];

				// [Ace] arooкas is a god. This is non-negotiable.
				double length = blip.DrawPos.Length();
				double outtaRangeFac = 1.0;
				if (length > scanDist)
				{
					outtaRangeFac = scanDist / length;
				}

				// [Ace] I don't know why, I don't want to know why, I shouldn't have to wonder why, but for whatever reason, the X and Y coordinates are flipped.
				vector2 finalPos = ((blip.DrawPos * outtaRangeFac) / scale) + (radarPos.y, radarPos.x);
				StatusBar.DrawImage(blip.Icon, (finalPos.y, finalPos.x), drawFlags, alpha * (outtaRangeFac ** 3), blip.DrawBox, col: blip.DrawCol);
			}

			// --------------- PRETEND WE WERE NEVER HERE ---------------

			StatusBar.BeginHUD(1.0, false);
			StatusBar.SetSize(StatusBar.RelTop, OriginalWidth, OriginalHeight);
		}
	}

	// ----------------------------------------------------------
	// INFORMATION
	// ----------------------------------------------------------

	protected virtual ui double GetAlpha()
	{
		double Alpha = Opacity.GetFloat();
		if (BatteryEnabled.GetBool())
		{
			double Mult = BatteryPower[consoleplayer] / 100.0;
			Alpha *= max(0.35, Mult);
		}
		return Alpha;
	}
	protected virtual clearscope bool CheckRadarCondition(PlayerPawn plr) { return true; }

	clearscope int GetRadarMode()
	{
		return RadarMode[consoleplayer];
	}

	double GetDrainMult(RMode mode) const
	{
		switch (mode)
		{
			case Mode_Local: return 2.0;
			case Mode_Movement: return 1.5;
			case Mode_Full: return 1.0;
		}

		return 1.0;
	}

	private clearscope int GetHostileBlipCount()
	{
		int blips = 0;
		for (int i = 0; i < RadarBlips.Size(); ++i)
		{
			if (RadarBlips[i].IsHostile)
			{
				blips++;
			}
		}
		return blips;
	}

	private ui int GetAlignmentFlags(vector2 offsets) const
	{
		int AlignFlags = 0;
		if (offsets.x > 0)
		{
			AlignFlags |= StatusBar.DI_SCREEN_LEFT;
		}
		else if (offsets.x < 0)
		{
			AlignFlags |= StatusBar.DI_SCREEN_RIGHT;
		}
		else
		{
			AlignFlags |= StatusBar.DI_SCREEN_HCENTER;
		}

		if (offsets.y > 0)
		{
			AlignFlags |= StatusBar.DI_SCREEN_TOP;
		}
		else if (offsets.y < 0)
		{
			AlignFlags |= StatusBar.DI_SCREEN_BOTTOM;
		}
		else
		{
			AlignFlags |= StatusBar.DI_SCREEN_VCENTER;
		}
		
		return AlignFlags;
	}
}
